<?php

/**
 * Implements hook_init().
 * For debugging, and more stuff.
 */
function inline_devel_init() {
  // Check if we need to flush the hooks cache when a hook removed/declared.
  if (!isset($_SESSION['function'])) {
    $_SESSION['function_number'] = 0;
  }
  else {
    if (count($_SESSION['function']) != $_SESSION['function_number']) {
      $_SESSION['function_number'] = count($_SESSION['function']);

      // Flush all because there is a new function in the stack.
      drupal_flush_all_caches();
    }
  }

  // Building declared function in each page callback.
  if (isset($_SESSION['function']) && !empty($_SESSION['function'])) {
    foreach ($_SESSION['function'] as $function) {
     eval('
        function ' . $function['function'] . '('. $function['arguments'] .') {
          ' . $function['content'] . '
        }
      ');
    }
  }
}

/**
 * Implements hook_menu().
 */
function inline_devel_menu() {
  $items = array();

  $items['devel/php/inline_devel/%'] = array(
    'page callback' => 'inline_devel_php_functions',
    'page arguments' => array(3),
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback - Print out JSON format with the name of the functions.
 */
function inline_devel_php_functions($text) {
  $functions = inline_devel_get_relevent_functions($text);

  drupal_json_output($functions);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function inline_devel_form_devel_execute_form_alter(&$form, &$form_state) {

  // Add the js and css file.
  $form['#attached']['js'][] = drupal_get_path('module', 'inline_devel') . '/js/inline_devel.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'inline_devel') . '/css/inline_devel.css';

  // Add div beneath the form
  $form['execute']['code']['#description'] = "<div class='suggestion' id='suggestion'></div>" . $form['execute']['code']['#description'];

  // Verify we don't declare the same function.
  $form['#validate'][] = 'inline_devel_prevent_redeclare';

  // Adding function that check if you a user entered a hook.
  $form['#submit'] = array('inline_devel_form_submit_register_hook') + $form['#submit'];
}

/**
 * Validate function to prevent redeclare the same function name.
 */
function inline_devel_prevent_redeclare(&$form, $form_state) {
  if (empty($form_state['values']['code'])) {
    return;
  }

  $functions = inline_devel_php_parsing($form_state['values']['code']);

  // Remove the function from the textarea.
  $form_state['values']['code'] = str_replace($functions[0], "", $form_state['values']['code']);

  if (isset($_SESSION['function'][$functions[1]])) {
    unset($_SESSION['function'][$functions[1]]);
  }
}

/**
 * Custom submit handler: register hook in the hooks_sessions.
 */
function inline_devel_form_submit_register_hook(&$form, &$form_state) {
  if (empty($form_state['values']['code'])) {
    return;
  }

  $functions = inline_devel_php_parsing($form_state['values']['code']);

  // Change the hook prefix name.
  inline_devel_change_hook_prefix($functions[1]);

  $_SESSION['function'][$functions[1]] = array(
    'function' => $functions[1],
    'arguments' => $functions[2],
    'content' => $functions[3]
  );
}

/**
 * Get list of hooks.
 */
function inline_devel_get_list_of_hooks() {
  // TODO: caching the data.
  $modules = inline_devel_get_modules();

  foreach ($modules as $name => $file) {
    // Start processing.
    $file = @file_get_contents($file);

    if (!$file) {
      continue;
    }

    if(!preg_match_all("/module_invoke_all\((.*?), (.*?)\);/ismx", $file, $arr)) {
      continue;
    }

    foreach ($arr[1] as $hook) {
      if ($name = reset(explode(")", str_replace(array("'", " ", ".", '"'), "", $hook)))) {
        $hooks[] = "hook_" . $name;
      }
    }
  }

  return $hooks;
}

/**
 * Return list of modules path.
 */
function inline_devel_get_modules() {
  foreach (module_list() as $module) {
    $modules[$module] = drupal_get_path('module', $module) . '/' . $module .'.module';
  }

  return $modules;
}

/**
 * Return the function name that start with the argument.
 */
function inline_devel_get_relevent_functions($funcion_name) {
  $funcion_name = end(explode(' ', $funcion_name));

  $functions = get_defined_functions();

  $scope = array(
    'function' => array_merge(array_merge($functions['internal'], $functions['user'])),
    'class' => get_declared_classes(),
    'interface' => get_declared_interfaces(),
    'hooks' => inline_devel_get_list_of_hooks(),
  );

  $output_functions = array();

  $i = 0;
  foreach ($scope as $type => $functions) {
    foreach ($functions as $function) {
      if (strpos(strtolower($function), strtolower($funcion_name)) === 0) {
        $output_functions[] = array('id' => $i++,  'name' => $function, 'type' => $type);
      }
    }
  }

  return $output_functions;
}

/**
 * Use REGEX to tear down functions.
 *
 * TODO: for now, the REGEX recognize only one function at a time, need a way to
 * recognize all functions.
 */
function inline_devel_php_parsing($code) {
  preg_match("/function.+?([a-zA-Z0-9_]+?)[\s]*\((.*?)\)[\s]*\{(.+)\}/is", $code, $functions);
  return array_map("trim", $functions);
}

/**
 * Rename hook to the inline_devel_dummy_module
 */
function inline_devel_change_hook_prefix(&$text) {
  $text = str_replace("hook", "inline_devel_dummy_module", $text);
}
