<?php

/**
 * @file
 * Main module file for Inline devel logs.
 */


/**
 * Implements hook_entity_info().
 */
function inline_devel_logs_entity_info() {
  return array(
    'inline_devel_logs' => array(
      'label' => t('Inline devel log'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'inline_devel_logs',
      'entity keys' => array(
        'id' => 'id',
      ),
    ),
  );
}

/**
 * Create an inline devel log entity.
 *
 * @param $values
 *  The initialized values of the inline devel log entity.
 *
 * @return Entity
 *  The entity object of the inline devel entry.
 */
function inline_devel_logs_create($values = array()) {
  return entity_create('inline_devel_logs', $values);
}

/**
 * Load an inline devel log entry.
 *
 * @param $id
 *  The inline devel log identifier.
 *
 * @return Entity
 *  The inline devel log object.
 */
function inline_devel_logs_load($id) {
  $results = entity_load('inline_devel_logs', array($id));
  return reset($results);
}

/**
 * Load multiple inline devel logs entries.
 *
 * @param $ids
 *  List of IDs to load.
 *
 * @return Entity
 *  List of inline devel entries.
 */
function inline_devel_logs_load_multiple($ids) {
  return entity_load('inline_devel_logs', $ids);
}

/**
 * Implements hook_menu().
 */
function inline_devel_logs_menu() {
  $items = array();

  $items['inline_devel/log/redo/%message'] = array(
    'page callback' => 'inline_devel_logs_log_redo',
    'page arguments' => array(3),
    'access arguments' => array('access devel information'),
  );

  $items['admin/structure/inline_devel_admin/logs'] = array(
    'title' => 'Log list',
    'description' => 'Delete here your logs',
    'access arguments' => array('access devel information'),
    'page callback' => 'inline_devel_logs_log_list',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/structure/inline_devel_admin/logs/delete/%'] = array(
    'title' => 'Delete log',
    'access arguments' => array('access devel information'),
    'page callback' => 'inline_devel_logs_log_delete',
    'page arguments' => array(5),
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function inline_devel_logs_theme() {
  return array('inline_devel_log' => array(
    'template' => 'inline_devel_log_row',
    'path' => drupal_get_path('module', 'inline_devel_logs') . '/template',
  ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function inline_devel_logs_form_devel_execute_form_alter(&$form, &$form_state) {
  // If there are any history of logged code - show the history button.
  if (inline_devel_logs_number_of_logs()) {
    $form['#attached']['css'][] = drupal_get_path('module', 'inline_devel_logs') . '/css/inline_devel_logs.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'inline_devel_logs') . '/js/inline_devel_logs.js';

    $form['execute']['op']['#weight'] = 0;
    $form['execute']['op']['#prefix'] = '<div class="buttons-wrapper">';
    $form['execute']['history'] = array(
      '#type' => 'button',
      '#weight' => 1,
      '#value' => t('History'),
      '#suffix' => '<div id="history"><div class="code-wrappers">' . inline_devel_logs_get_logs() . '</div></div></div>',
      '#attributes' => array(
        'onclick' => array("return false;"),
      ),
    );
  }

  // Before registering the hooks(that alter the original code) - log the code.
  $first_function = array_slice($form['#submit'], 0, 1);
  $inserted_function = array('inline_devel_logs_log_function');
  $other_functions = array_slice($form['#submit'], 1, count($form['#submit']));

  $form['#submit'] = array_merge($first_function, $inserted_function, $other_functions);
}

/**
 * Get the number of logs.
 */
function inline_devel_logs_number_of_logs() {
  $number = 0;

  return $number;
}

/**
 * Get list of logs.
 */
function inline_devel_logs_get_logs() {
  return 'foo';
}

/**
 * Custom execute function - log the message.
 */
function inline_devel_logs_log_function(&$form, $form_state) {
}

/**
 * Redo the function with three steps:
 *  1. Redo the function all over again.
 *  2. log the code all over again
 *  3. Write the code in the last session code to show to code in the form.
 */
function inline_devel_logs_log_redo($message) {
  eval($message->arguments['@code']);
  // TOOD: Log the code.
  $_SESSION['devel_execute_code'] = $message->arguments['@code'];

  // Go back to the devel.
  drupal_goto('devel/php');
}
